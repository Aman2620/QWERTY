import threading
import time

class RicartAgrawalaMutex:
    def __init__(self, num_processes, process_id):
        self.num_processes = num_processes
        self.process_id = process_id
        self.requesting = False
        self.reply_received = [False] * num_processes
        self.request_timestamp = 0
        self.critical_section = False
        self.pending_replies = 0
        self.cs_enter_count = 0
        self.cs_exit_count = 0
        self.request_queue = []

    def request_critical_section(self):
        self.requesting = True
        self.request_timestamp = time.time()
        self.pending_replies = self.num_processes - 1
        self.reply_received = [False] * self.num_processes

        for i in range(self.num_processes):
            if i != self.process_id:
                self.request_queue.append(i)
                thread = threading.Thread(target=self.send_request, args=(i,))
                thread.start()

        while self.pending_replies > 0:
            time.sleep(0.1)

        self.critical_section = True
        self.cs_enter_count += 1
        print(f"Process {self.process_id} entered critical section.")

    def send_request(self, target_process):
        print(f"Process {self.process_id} sending request to Process {target_process}.")
        self.reply_received[target_process] = False
        # Simulate message delay
        time.sleep(0.5)
        self.request_queue.remove(target_process)
        self.reply_received[target_process] = True

    def release_critical_section(self):
        self.critical_section = False
        self.cs_exit_count += 1
        print(f"Process {self.process_id} exited critical section.")

        for i in range(self.num_processes):
            if i in self.request_queue:
                self.reply_received[i] = False

        self.request_queue.clear()
        self.requesting = False

    def handle_request(self, from_process, timestamp):
        if self.critical_section or (self.requesting and (timestamp, from_process) < (self.request_timestamp, self.process_id)):
            self.request_queue.append(from_process)
        else:
            self.reply_received[from_process] = True
            thread = threading.Thread(target=self.send_reply, args=(from_process,))
            thread.start()

    def send_reply(self, target_process):
        print(f"Process {self.process_id} sending reply to Process {target_process}.")
        # Simulate message delay
        time.sleep(0.5)
        self.reply_received[target_process] = True

    def run(self):
        while True:
            if not self.critical_section and not self.requesting:
                time.sleep(2)
                self.request_critical_section()
                time.sleep(5)
                self.release_critical_section()

    def simulate_requests(self):
        while True:
            time.sleep(3)
            if not self.requesting:
                target_process = int(input(f"Enter the process id (0-{self.num_processes-1}) to request critical section: "))
                self.request_critical_section()
                time.sleep(5)
                self.release_critical_section()

            time.sleep(1)

    def simulate(self):
        t1 = threading.Thread(target=self.run)
        t2 = threading.Thread(target=self.simulate_requests)
        t1.start()
        t2.start()


# Example usage
num_processes = 5
process_id = 0  # ID of the current process (0 to num_processes-1)
mutex = RicartAgrawalaMutex(num_processes, process_id)
mutex.simulate()
