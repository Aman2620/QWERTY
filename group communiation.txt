import threading
import time
import queue

class MessageBroker:
    def __init__(self):
        self.subscribers = {}
        self.message_queue = queue.Queue()

    def publish(self, topic, message):
        self.message_queue.put((topic, message))

    def subscribe(self, topic, subscriber):
        if topic not in self.subscribers:
            self.subscribers[topic] = set()
        self.subscribers[topic].add(subscriber)

    def unsubscribe(self, topic, subscriber):
        if topic in self.subscribers and subscriber in self.subscribers[topic]:
            self.subscribers[topic].remove(subscriber)

    def run(self):
        while True:
            if not self.message_queue.empty():
                topic, message = self.message_queue.get()
                if topic in self.subscribers:
                    for subscriber in self.subscribers[topic]:
                        subscriber.receive_message(topic, message)
            time.sleep(0.1)

class Publisher:
    def __init__(self, broker):
        self.broker = broker

    def publish_message(self, topic, message):
        self.broker.publish(topic, message)
        print(f"Published message '{message}' on topic '{topic}'")

class Subscriber:
    def __init__(self, broker):
        self.broker = broker

    def subscribe_to_topic(self, topic):
        self.broker.subscribe(topic, self)
        print(f"Subscribed to topic '{topic}'")

    def unsubscribe_from_topic(self, topic):
        self.broker.unsubscribe(topic, self)
        print(f"Unsubscribed from topic '{topic}'")

    def receive_message(self, topic, message):
        print(f"Received message '{message}' on topic '{topic}'")

# Example usage
broker = MessageBroker()

publisher = Publisher(broker)
subscriber1 = Subscriber(broker)
subscriber2 = Subscriber(broker)

subscriber1.subscribe_to_topic("news")
subscriber2.subscribe_to_topic("news")

publisher.publish_message("news", "Breaking: New discovery made!")
publisher.publish_message("sports", "Score update: Team A 2 - Team B 1")

subscriber1.unsubscribe_from_topic("news")

publisher.publish_message("news", "Weather update: Sunny day ahead!")
publisher.publish_message("sports", "Game postponed due to rain.")

# Start the message broker thread
broker_thread = threading.Thread(target=broker.run)
broker_thread.start()
