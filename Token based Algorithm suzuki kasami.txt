import threading
import time
import random

class SuzukiKasamiMutex:
    def __init__(self, num_processes, process_id):
        self.num_processes = num_processes
        self.process_id = process_id
        self.requesting = False
        self.holding = False
        self.request_queue = []
        self.token_holders = [False] * num_processes
        self.token_holders[0] = True  # Assume process 0 starts with the token
        self.token = 0
        self.request_count = 0
        self.token_available = threading.Event()

    def request_critical_section(self):
        self.requesting = True
        self.request_count += 1
        print(f"Process {self.process_id} requesting critical section (Request count: {self.request_count})")
        self.request_queue.append(self.process_id)
        self.broadcast_token_request()

    def release_critical_section(self):
        self.requesting = False
        self.holding = False
        self.request_count -= 1
        print(f"Process {self.process_id} releasing critical section (Request count: {self.request_count})")
        if self.request_count == 0:
            self.token_holders[self.process_id] = False
            self.token_holders[(self.process_id + 1) % self.num_processes] = True
            self.token_available.set()

    def broadcast_token_request(self):
        for i in range(self.num_processes):
            if i != self.process_id:
                thread = threading.Thread(target=self.send_token_request, args=(i,))
                thread.start()

    def send_token_request(self, target_process):
        print(f"Process {self.process_id} sending token request to Process {target_process}")
        time.sleep(random.uniform(0.1, 0.5))  # Simulate message delay
        self.token_holders[target_process] = False
        self.token_available.set()

    def handle_token_request(self, from_process):
        if not self.requesting and not self.holding:
            self.token_holders[from_process] = True
            self.token_available.set()

    def run(self):
        while True:
            self.token_available.wait()
            self.token_available.clear()
            if not self.requesting and not self.holding:
                self.token = self.token_holders.index(True)
                print(f"Process {self.process_id} received token from Process {self.token}")
                if self.token == self.process_id:
                    self.holding = True
                    print(f"Process {self.process_id} now holding the token")
                else:
                    self.token_available.set()

            if self.holding:
                time.sleep(random.uniform(2, 5))
                self.release_critical_section()

    def simulate(self):
        t = threading.Thread(target=self.run)
        t.start()


# Example usage
num_processes = 5
process_id = 0  # ID of the current process (0 to num_processes-1)
mutex = SuzukiKasamiMutex(num_processes, process_id)
mutex.simulate()

time.sleep(1)  # Ensure the simulation thread starts before the requests are made

# Simulate process requesting critical section at random intervals
def simulate_requests(mutex):
    while True:
        time.sleep(random.uniform(1, 5))
        mutex.request_critical_section()

t = threading.Thread(target=simulate_requests, args=(mutex,))
t.start()
